<?php

namespace App\Modules\{{moduleName}}\Controllers;

use Illuminate\Http\Request;
use App\Modules\{{moduleName}}\Models\{{moduleName}};
use App\Http\Controllers\Controller;
use Illuminate\Support\Facades\Validator;
use App\Models\Log;

class {{moduleName}}Controller extends Controller
{

    protected $title = "{{moduleName}}";

    public function __construct()
    {
        $this->model = new {{moduleName}}();
    }
    /**
     * Display a listing of the resource.
     *
     * @return \Illuminate\Http\Response
     */
    public function index()
    {
        $data = [
            'model' => $this->model
        ];
        
        return view('{{moduleName}}::index', $data);
    }

    /**
     * Show the form for creating a new resource.
     *
     * @return \Illuminate\Http\Response
     */
    public function create(Request $request)
    {
        return view("{{moduleName}}::create");
    }

    /**
     * Store a newly created resource in storage.
     *
     * @param  \Illuminate\Http\Request  $request
     * @return \Illuminate\Http\Response
     */
    public function store(Request $request)
    {
        $formData = $request->validate([
{{storeValidator}}
        ]);
        

        ${{moduleNameCamel}} = {{moduleName}}::create($formData);
        $log  = Log::aktivitas('Menambah '.$this->title.' ID = '.${{moduleNameCamel}}->{{primaryKey}});
        return redirect()
                ->route("{{moduleSlug}}.index")
                ->with('status',['type'=>'success','message' => 'Berhasil menambahkan Data']);
    }

    /**
     * Display the specified resource.
     *
     * @param  int  $id
     * @return \Illuminate\Http\Response
     */
    public function show($id)
    {
        ${{moduleNameCamel}} = $this->model->showWithForeign($id);
        return view("{{moduleName}}::show", ['{{moduleNameCamel}}' => ${{moduleNameCamel}}]);
    }

    /**
     * Show the form for editing the specified resource.
     *
     * @param  int  $id
     * @return \Illuminate\Http\Response
     */
    public function edit($id)
    {

        ${{moduleNameCamel}} = $this->model::findOrFail($id);
        
        return view('{{moduleName}}::edit', ['data' => ${{moduleNameCamel}}]);
    }

    /**
     * Update the specified resource in storage.
     *
     * @param  \Illuminate\Http\Request  $request
     * @param  int  $id
     * @return \Illuminate\Http\Response
     */
    public function update(Request $request, $id)
    {
        $backLink = getBackLink();
        $formData = $request->validate([
{{updateValidator}}
        ]);

        ${{moduleNameCamel}} = {{moduleName}}::findOrFail($id);
        ${{moduleNameCamel}}->update($formData);

        $log  = Log::aktivitas('Mengubah '.$this->title.' ID = '.${{moduleNameCamel}}->{{primaryKey}});
        return ($backLink 
                ? redirect($backLink)
                : redirect()->route("{{moduleSlug}}.index"))->with('status',['type'=>'success','message'=>'Berhasil memperbarui Data']);
    }

    /**
     * Remove the specified resource from storage.
     *
     * @param  int  $id
     * @return \Illuminate\Http\Response
     */
    public function destroy($id)
    {
        ${{moduleNameCamel}} = {{moduleName}}::findOrFail($id);
        ${{moduleNameCamel}}->delete();
        $log  = Log::aktivitas('Menghapus '.$this->title.' ID = '.$id);
        return response()->json(['success'=>true]);
    }

    public function searchCombo(Request $request){
        $validator = Validator::make($request->all(), [
            "q" => "sometimes",
            "count" => "sometimes|numeric",
            "field" => ['required', 'string'],
            "initial" => 'nullable',
        ]);

        if ($validator->fails()) {
            return response()->json([
                "success" => false,
                "message" => implode("\n", $validator->errors()->all()),
                "message_type" => "warning"
            ]);
        }

        $formData = $validator->validated();
        $result = $this->model->getComboForeign($formData['field'], $formData);

        return response()->json([
            "success" => $result !== null,
            "data" => $result
        ]);
    }
}
